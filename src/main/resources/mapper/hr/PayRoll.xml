<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yedam.erp.mapper.hr.PayrollMapper">

  <!-- ============================= -->
  <!-- 급여대장 목록 (회사/연월) -->
  <!-- ============================= -->
  <select id="selectPayrollList"
          parameterType="com.yedam.erp.vo.hr.PayrollVO"
          resultType="com.yedam.erp.vo.hr.PayrollVO">
    SELECT
      p.payroll_no,
      p.company_code,
      p.year_month,
      p.dept_code,
      p.title,
      p.pay_date,
      p.status,
      d.dept_name,
      (SELECT COUNT(*) FROM emp e
         WHERE e.company_code = p.company_code
           AND e.dept_code    = p.dept_code) AS emp_count
    FROM payroll p
    JOIN dept d
      ON d.company_code = p.company_code
     AND d.dept_code    = p.dept_code
    WHERE p.company_code = #{companyCode}
    <if test="yearMonth != null and yearMonth != ''">
      AND p.year_month = #{yearMonth}
    </if>
    ORDER BY p.year_month DESC, d.dept_name ASC
  </select>

  <!-- ============================= -->
  <!-- 급여대장 단건 (모달 상단 표시용) -->
  <!-- ============================= -->
  <select id="selectPayroll"
          parameterType="com.yedam.erp.vo.hr.PayrollVO"
          resultType="com.yedam.erp.vo.hr.PayrollVO">
    SELECT
      p.payroll_no   AS payrollNo,
      p.company_code AS companyCode,
      p.year_month   AS yearMonth,
      p.dept_code    AS deptCode,
      d.dept_name    AS deptName,
      p.title        AS title,
      p.pay_date     AS payDate,
      p.status       AS status,
      (SELECT COUNT(*) FROM emp e
         WHERE e.company_code = p.company_code
           AND e.dept_code    = p.dept_code) AS empCount
    FROM payroll p
    JOIN dept d
      ON d.company_code = p.company_code
     AND d.dept_code    = p.dept_code
    WHERE p.payroll_no   = #{payrollNo}
      AND p.company_code = #{companyCode}
  </select>

  <!-- ============================= -->
  <!-- 급여대장 등록 -->
  <!-- ============================= -->
  <insert id="insertPayroll" parameterType="com.yedam.erp.vo.hr.PayrollVO">
    INSERT INTO payroll (
      payroll_no, company_code, year_month, dept_code, title, pay_date, status
    )
    SELECT
      SEQ_PAYROLL_NO.NEXTVAL,
      #{companyCode},
      #{yearMonth},
      e.dept_code,
      NVL(#{title},
          TO_CHAR(#{yearMonth}) || ' ' ||
          (SELECT d.dept_name FROM dept d
            WHERE d.company_code = #{companyCode}
              AND d.dept_code    = e.dept_code)),
      #{payDate},
      'DRAFT'
    FROM (
      SELECT DISTINCT dept_code
      FROM emp
      WHERE company_code = #{companyCode}
    ) e
    WHERE NOT EXISTS (
      SELECT 1
      FROM payroll p
      WHERE p.company_code = #{companyCode}
        AND p.year_month   = #{yearMonth}
        AND p.dept_code    = e.dept_code
    )
  </insert>

  <!-- ============================= -->
  <!-- 급여대장 수정 (제목/지급일) -->
  <!-- ============================= -->
  <update id="updatePayroll" parameterType="com.yedam.erp.vo.hr.PayrollVO">
    UPDATE payroll
       SET title    = #{title},
           pay_date = #{payDate}
     WHERE payroll_no   = #{payrollNo}
       AND company_code = #{companyCode}
  </update>

  <!-- ============================= -->
  <!-- 상태 변경 (확정/취소) -->
  <!-- ============================= -->
  <update id="updatePayrollStatus" parameterType="com.yedam.erp.vo.hr.PayrollVO">
    UPDATE payroll
       SET status = #{status}
     WHERE payroll_no   = #{payrollNo}
       AND company_code = #{companyCode}
  </update>

  <!-- ============================= -->
  <!-- 조건 조회 (회사/연월/부서/상태) -->
  <!-- ============================= -->
  <select id="selectPayrollListByCond"
          parameterType="com.yedam.erp.vo.hr.PayrollVO"
          resultType="com.yedam.erp.vo.hr.PayrollVO">
    SELECT
      p.payroll_no,
      p.company_code,
      p.year_month,
      p.dept_code,
      p.title,
      p.pay_date,
      p.status,
      d.dept_name,
      (SELECT COUNT(*) FROM emp e
         WHERE e.company_code = p.company_code
           AND e.dept_code    = p.dept_code) AS emp_count
    FROM payroll p
    JOIN dept d
      ON d.company_code = p.company_code
     AND d.dept_code    = p.dept_code
    WHERE p.company_code = #{companyCode}
    <if test="yearMonth != null and yearMonth != ''">
      AND p.year_month = #{yearMonth}
    </if>
    <if test="deptCode != null and deptCode != ''">
      AND p.dept_code = #{deptCode}
    </if>
    <if test="status != null and status != ''">
      AND p.status = #{status}
    </if>
    ORDER BY p.year_month DESC, d.dept_name ASC
  </select>

  <!-- ========================================================= -->
  <!-- 동적(라벨 기반) PIVOT을 위한 IN 리스트 -->
  <!-- 코드표(use_yn='Y') + 실데이터(emp_pay_fix) 합집합 -->
  <!-- ========================================================= -->

  <!-- 수당 PIVOT IN 리스트:  '식대' AS "AL_식대", ... -->
  <select id="selectAllowColList"
          parameterType="com.yedam.erp.vo.hr.PayrollVO"
          resultType="string">
    WITH base_emp AS (
      SELECT e.emp_id
      FROM emp e
      WHERE e.company_code = #{companyCode}
        AND e.dept_code = (
          SELECT p.dept_code
          FROM payroll p
          WHERE p.payroll_no   = #{payrollNo}
            AND p.company_code = #{companyCode}
        )
    ),
    label_union AS (
      SELECT TRIM(a.allow_name) AS label
      FROM pay_allow_code a
      WHERE a.company_code = #{companyCode}
        AND a.use_yn = 'Y'
      UNION
      SELECT DISTINCT TRIM(epf.emp_allow_label) AS label
      FROM emp_pay_fix epf
      WHERE epf.company_code = #{companyCode}
        AND epf.pay_type = 'ALLOW'
        AND epf.emp_id IN (SELECT emp_id FROM base_emp)
    )
    SELECT NVL(
      LISTAGG( '''' || label || ''' AS "AL_' || label || '"', ',' )
      WITHIN GROUP (ORDER BY label),
      '''__DUMMY__'' AS "AL___DUMMY__"'
    ) AS col_list
    FROM label_union
  </select>

  <!-- 공제 PIVOT IN 리스트:  '소득세' AS "DC_소득세", ... -->
  <select id="selectDeductColList"
          parameterType="com.yedam.erp.vo.hr.PayrollVO"
          resultType="string">
    WITH base_emp AS (
      SELECT e.emp_id
      FROM emp e
      WHERE e.company_code = #{companyCode}
        AND e.dept_code = (
          SELECT p.dept_code
          FROM payroll p
          WHERE p.payroll_no   = #{payrollNo}
            AND p.company_code = #{companyCode}
        )
    ),
    label_union AS (
      SELECT TRIM(d.deduct_name) AS label
      FROM pay_deduct_code d
      WHERE d.company_code = #{companyCode}
        AND d.use_yn = 'Y'
      UNION
      SELECT DISTINCT TRIM(epf.emp_allow_label) AS label
      FROM emp_pay_fix epf
      WHERE epf.company_code = #{companyCode}
        AND epf.pay_type = 'DEDUCT'
        AND epf.emp_id IN (SELECT emp_id FROM base_emp)
    )
    SELECT NVL(
      LISTAGG( '''' || label || ''' AS "DC_' || label || '"', ',' )
      WITHIN GROUP (ORDER BY label),
      '''__DUMMY__'' AS "DC___DUMMY__"'
    ) AS col_list
    FROM label_union
  </select>

  <!-- ============================= -->
  <!-- 사원별 급여 상세 (동적 PIVOT, 하드코딩 제거) -->
  <!-- 파라미터 map: { companyCode, payrollNo, allowCols, deductCols } -->
  <!-- 리턴: Map (emp_id, emp_name, position, + AL_*, DC_* 전부 동적 포함) -->
  <!-- ============================= -->
  <select id="selectPayrollDetailPivot" parameterType="map" resultType="map">
    WITH BASE_EMP AS (
      SELECT e.emp_id, e.name, e.position
      FROM emp e
      WHERE e.company_code = #{companyCode}
        AND e.dept_code = (
          SELECT p.dept_code
          FROM payroll p
          WHERE p.payroll_no   = #{payrollNo}
            AND p.company_code = #{companyCode}
        )
    ),
    ALLOW_SRC AS (
      SELECT epf.emp_id, TRIM(epf.emp_allow_label) AS item, epf.emp_allow_pay AS amount
      FROM emp_pay_fix epf
      WHERE epf.company_code = #{companyCode}
        AND epf.pay_type = 'ALLOW'
        AND epf.emp_id IN (SELECT emp_id FROM BASE_EMP)
    ),
    DEDUCT_SRC AS (
      SELECT epf.emp_id, TRIM(epf.emp_allow_label) AS item, epf.emp_allow_pay AS amount
      FROM emp_pay_fix epf
      WHERE epf.company_code = #{companyCode}
        AND epf.pay_type = 'DEDUCT'
        AND epf.emp_id IN (SELECT emp_id FROM BASE_EMP)
    ),
    /* emp_id를 서로 다른 이름으로 분리해서 최종 SELECT에서 컬럼 충돌 방지 */
    ALLOW_P AS (
      SELECT *
      FROM (
        SELECT b.emp_id AS emp_id_a, s.item, s.amount
        FROM BASE_EMP b LEFT JOIN ALLOW_SRC s ON s.emp_id = b.emp_id
      )
      PIVOT (
        SUM(amount)
        FOR item IN (${allowCols})
      )
    ),
    DEDUCT_P AS (
      SELECT *
      FROM (
        SELECT b.emp_id AS emp_id_d, s.item, s.amount
        FROM BASE_EMP b LEFT JOIN DEDUCT_SRC s ON s.emp_id = b.emp_id
      )
      PIVOT (
        SUM(amount)
        FOR item IN (${deductCols})
      )
    )
    SELECT
      b.emp_id   AS "emp_id",
      b.name     AS "emp_name",
      b.position AS "position",
      a.*,
      d.*
    FROM BASE_EMP b
    LEFT JOIN ALLOW_P a  ON a.emp_id_a = b.emp_id
    LEFT JOIN DEDUCT_P d ON d.emp_id_d = b.emp_id
    ORDER BY b.emp_id
  </select>
 
</mapper>
