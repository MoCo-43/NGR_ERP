<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 인터페이스 FQN과 100% 일치 -->
<mapper namespace="com.yedam.erp.mapper.account.JournalMapper">
	<!-- resultMap 은 참조보다 ‘위’에 두세요 -->
	<resultMap id="journalMap"
		type="com.yedam.erp.vo.account.JournalVO">
		<id property="jrnCode" column="JRN_CODE" />
		<result property="lineNo" column="LINE_NO" />
		<result property="jrnNo" column="JRN_NO" />
		<result property="jrnDate" column="JRN_DATE" />
		<result property="acctCode" column="ACCT_CODE" />
		<result property="dcType" column="DC_TYPE" />
		<result property="amount" column="AMOUNT" />
		<result property="deptCode" column="DEPT_CODE" />
		<result property="remarks" column="REMARKS" />
		<result property="status" column="STATUS" />
		<result property="createdAt" column="CREATED_AT" />
		<result property="createdBy" column="CREATED_BY" />
		<result property="cusCode" column="CUS_CODE" />
		<result property="closeNo" column="CLOSE_NO" />
	</resultMap>

	<select id="selectJournalList" resultType="JournalNamesVO">
		SELECT
		J.JRN_CODE,
		J.LINE_NO,
		J.JRN_NO,
		J.JRN_DATE,
		J.ACCT_CODE,
		A.ACCT_NAME, -- 계정명
		J.DC_TYPE,
		J.AMOUNT,
		J.REMARKS,
		J.STATUS,
		J.CREATED_AT,
		J.CREATED_BY,
		J.CUS_CODE,
		C.CUS_NAME, -- 거래처명
		J.CLOSE_NO
		FROM JOURNAL J
		LEFT JOIN
		ACCOUNT A
		ON J.ACCT_CODE = A.ACCT_CODE
		LEFT JOIN CUSTOMER C
		ON J.CUS_CODE
		= C.CUS_CODE
		WHERE J.COMPANY_CODE = #{companyCode}
		ORDER BY CREATED_AT ASC, LINE_NO ASC
	</select>

	<!-- 전표번호 생성 (DB 함수 호출) -->
	<select id="selectNextJrnNo" resultType="string">
		  SELECT FN_NEXT_VOUCHER_NO('J', SYSDATE) FROM dual
	</select>

	<insert id="insertJournal"
		parameterType="com.yedam.erp.vo.account.JournalVO">

		<!-- ✅ 시퀀스로 JRN_CODE 먼저 채워줌 -->
		<selectKey keyProperty="jrnCode" order="BEFORE"
			resultType="string">
			SELECT 'J-' || TO_CHAR(SYSDATE, 'YYYYMMDD') || '-' ||
			LPAD(SEQ_JRN_CODE.NEXTVAL, 3, '0')
			FROM dual
		</selectKey>

		INSERT INTO JOURNAL (
		JRN_CODE, -- ✅ 시퀀스로 생성된 값
		JRN_NO,
		LINE_NO,
		JRN_DATE,
		ACCT_CODE,
		DC_TYPE,
		AMOUNT,
		REMARKS,
		STATUS,
		CREATED_AT,
		CREATED_BY,
		CUS_CODE,
		CLOSE_NO,
		COMPANY_CODE
		)
		VALUES (
		#{jrnCode}, -- ✅ selectKey로 먼저 채워진 값
		#{jrnNo},
		NVL((SELECT MAX(LINE_NO) FROM JOURNAL WHERE JRN_NO = #{jrnNo}), 0) + 1,
		#{jrnDate},
		#{acctCode},
		#{dcType},
		#{amount},
		#{remarks},
		'open',
		SYSDATE,
		#{createdBy},
		#{cusCode},
		#{closeNo},
		#{companyCode}
		)
	</insert>


	<!-- 일반 전표 UPDATE -->
	<update id="updateJournal"
		parameterType="com.yedam.erp.vo.account.JournalVO">
		UPDATE JOURNAL
		SET
		ACCT_CODE = #{acctCode}
		, DC_TYPE = #{dcType}
		, AMOUNT = #{amount}
		, REMARKS = #{remarks}
		, STATUS = #{status}
		, CUS_CODE = #{cusCode}
		, CLOSE_NO =
		#{closeNo}
		, CREATED_BY = #{createdBy}  <!-- 필요하다면 유지 -->
		WHERE JRN_CODE = #{jrnCode}
		AND LINE_NO = #{lineNo}
		AND COMPANY_CODE = #{companyCode}
	</update>


<insert id="insertJournalList"
		parameterType="com.yedam.erp.vo.account.JournalVO">

		<!-- ✅ 시퀀스로 JRN_CODE 먼저 채워줌 -->
		<selectKey keyProperty="jrnCode" order="BEFORE"
			resultType="string">
			SELECT 'J-' || TO_CHAR(SYSDATE, 'YYYYMMDD') || '-' ||
			LPAD(SEQ_JRN_CODE.NEXTVAL, 3, '0')
			FROM dual
		</selectKey>

		INSERT INTO JOURNAL (
		JRN_CODE, -- ✅ 시퀀스로 생성된 값
		JRN_NO,
		LINE_NO,
		JRN_DATE,
		ACCT_CODE,
		DC_TYPE,
		AMOUNT,
		REMARKS,
		STATUS,
		CREATED_AT,
		CREATED_BY,
		CUS_CODE,
		CLOSE_NO,
		COMPANY_CODE

		)
		VALUES (
		#{jrnCode}, -- ✅ selectKey로 먼저 채워진 값
		#{jrnNo},
		NVL((SELECT MAX(LINE_NO) FROM JOURNAL WHERE JRN_NO = #{jrnNo}), 0) + 1,
		#{jrnDate},
		#{acctCode},
		#{dcType},
		#{amount},
		#{remarks},
		'open',
		SYSDATE,
		#{createdBy},
		#{cusCode},
		#{closeNo},
		#{companyCode}
		)
	</insert>
	
	<!-- 전표 마감 리스트 -->
  <select id="selectJournalListClose" parameterType="long" resultType="com.yedam.erp.vo.account.JournalNamesVO">
    SELECT 
        j.jrn_no,
        c.CUS_NAME,
        MIN(j.jrn_date)   AS jrn_date,   -- 전표일자 (가장 빠른 날짜 기준)
        MIN(j.remarks)    AS remarks,    -- 대표 적요 (첫 행 기준)
        MIN(j.created_by) AS writer,     -- 작성자
        MIN(j.status)     AS status,     -- 전표 상태
        MAX(j.reversed_yn) AS reversedYn,  -- ✅ 역분개 여부 추가
        COUNT(*)        AS line_count, -- 라인 수
        SUM(CASE WHEN j.dc_type = 'D' THEN j.amount ELSE 0 END) AS total_debit,
        SUM(CASE WHEN j.dc_type = 'C' THEN j.amount ELSE 0 END) AS total_credit
    FROM journal j LEFT JOIN CUSTOMER C
		ON J.CUS_CODE
		= C.CUS_CODE
    WHERE j.company_code = #{companyCode}
    GROUP BY j.jrn_no, c.CUS_NAME
    ORDER BY j.jrn_no DESC
  </select>


   <!-- 전표 상세 (라인 역할) -->
  <select id="selectJournalDetailClose" parameterType="map" resultType="com.yedam.erp.vo.account.JournalNamesVO">
    SELECT 
        j.jrn_no,
        j.line_no,
        j.jrn_date,
        j.acct_code,
        a.acct_name,
        j.dc_type,
  		CASE WHEN j.dc_type = 'D' THEN j.amount END AS debit,
     	CASE WHEN j.dc_type = 'C' THEN j.amount END AS credit,
        j.remarks,
        j.cus_code,
        c.cus_name,
        j.status
    FROM journal j LEFT JOIN CUSTOMER c
		ON j.CUS_CODE
		= c.CUS_CODE
		LEFT JOIN
		ACCOUNT A
		ON j.ACCT_CODE = a.ACCT_CODE
    WHERE j.jrn_no = #{jrnNo}
    AND j.company_code = #{companyCode}
    ORDER BY j.line_no
  </select>

 <update id="updateStatusBatch" parameterType="map">
    UPDATE journal
       SET status = #{status}
     WHERE company_code = #{companyCode}
       AND jrn_no IN
       <foreach item="jrnNo" collection="jrnNoList" open="(" separator="," close=")">
         #{jrnNo}
       </foreach>
</update>


<!-- ✅ 역분개는 프로시저 호출 -->
<select id="reverseJournalCsv" statementType="CALLABLE">
    { call PRC_REVERSE_JOURNAL_CSV(
        #{companyCode, jdbcType=NUMERIC},
        #{originJrnNos, jdbcType=VARCHAR},
        #{createdBy, jdbcType=VARCHAR}
      ) }
</select>
</mapper>
