<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 인터페이스 FQN과 100% 일치 -->
<mapper namespace="com.yedam.erp.mapper.Biz.BizMapper">

<!-- 테스트용 전체 주문서 목록 조회 -->
<select id="getAllPO" resultType="PurchaseOrderVO">
  SELECT * 
  FROM PURCHASE_ORDER
</select>

<!-- 주문서 조회 -->
<select id="selectPO" resultType="JoinPoVO" parameterType="long">
SELECT
    p.PO_START,
    c.CUS_NAME,
    p.CREATER,
    CASE
        WHEN pd_counts.cnt > 1 THEN pod.PRODUCT_NAME || ' 외 ' || (pd_counts.cnt - 1) || '건'
        ELSE pod.PRODUCT_NAME
    END AS PRODUCT_NAME,
    c.BIZ_TYPE,
    p.PO_STATUS,
    p.NOTES,
    p.EX_DATE
FROM
    CUSTOMER c
LEFT JOIN
    PURCHASE_ORDER p ON c.CUS_CODE = p.CUS_CODE
LEFT JOIN
    PO_DETAIL pod ON p.PO_ID = pod.PO_ID
LEFT JOIN
    (SELECT PO_ID, COUNT(*) as cnt 
     FROM PO_DETAIL 
     GROUP BY PO_ID)pd_counts
ON
    p.PO_ID = pd_counts.PO_ID
WHERE c.COMPANY_CODE = #{companyCode}
ORDER BY PO_START DESC
</select>


<!-- 주문서 등록 -->
<!-- 헤더 insert: purchase_order -->
  <!-- 2-1. 헤더 INSERT: 시퀀스로 PO_ID 먼저 생성 -->
  <insert id="insertPOHeader" parameterType="PoInsertVO">
    <selectKey keyProperty="poId" resultType="long" order="BEFORE">
      SELECT PO_ID_SEQ.NEXTVAL FROM DUAL
    </selectKey>

    INSERT INTO purchase_order (
      PO_ID, COMPANY_CODE, PO_CODE, CUS_CODE, CREATER, PO_START, EX_DATE, PO_DATE,
      PO_STATUS, PAY_METHOD, NOTES, CREDIT_ACTIVE
    )
    VALUES (
      #{poId},
      #{companyCode},
      fn_generate_code('PO-', ''),
      #{cusCode},
      #{creater},
      #{poStart},
      #{exDate},
      #{poDate},
      '작성완료',
      #{payMethod},
      #{notes},
      #{creditActive}
    )
  </insert>

<insert id="insertPODetails" parameterType="PoInsertVO">
  INSERT INTO po_detail (
    POD_ID, PO_ID, COMPANY_CODE, PRODUCT_CODE, ORDER_QTY, UNIT_PRICE,
    DC_AMT, SUP_AMT, VAT_AMT, PRODUCT_NAME, VAT_TYPE
  )
  SELECT
    POD_ID_SEQ.NEXTVAL,
    #{poId},
    #{companyCode},
    t.productCode,
    t.orderQty,
    t.unitPrice,
    t.dcAmt,
    t.supAmt,
    t.vatAmt,
    t.productName,
    t.vatType
  FROM (
    <foreach collection="poDetails" item="d" separator=" UNION ALL ">
      SELECT
        #{d.productCode} AS productCode,
        #{d.orderQty}   AS orderQty,
        #{d.unitPrice}  AS unitPrice,
        #{d.dcAmt}      AS dcAmt,
        #{d.supAmt}     AS supAmt,
        #{d.vatAmt}     AS vatAmt,
        #{d.productName}   AS productName,
        #{d.vatType}    AS vatType
      FROM DUAL
    </foreach>
  ) 
</insert>


<!-- 주문서 상태 변경 -->
<update id="poStatusUpdate">
UPDATE PURCHASE_ORDER
SET PO_STATUS = #{poStatus}
WHERE PO_CODE = #{poCode}
</update>

<!-- 주문서 조회(모달) -->
<select id="getPoHistory" resultType="PoHistoryVO">
SELECT po.PO_CODE, po.PO_START, po.CUS_CODE, po.CREATER, po.EX_DATE,
       c.CUS_NAME, c.ADDR, c.ZIP_CODE, c.TEL,
       pd.PRODUCT_CODE, pd.PRODUCT_NAME, pd.ORDER_QTY, pd.UNIT_PRICE, pd.SUP_AMT
FROM PURCHASE_ORDER po
JOIN PO_DETAIL pd ON po.PO_ID = pd.PO_ID
JOIN CUSTOMER c ON po.CUS_CODE = c.CUS_CODE
WHERE po.COMPANY_CODE = #{companyCode}
</select>



<!-- 제품 조회(모달) -->
<select id="getProducts" parameterType="long" resultType="ProductCodeVO">
SELECT PRODUCT_CODE, 
       PRODUCT_NAME, 
       SALES_PRICE, 
       VAT_TYPE
FROM   PRODUCT
</select>



<!-- 거래처 조회(모달)-->
<select id="getCustomers" resultType="CusModalVO">
  SELECT c.CUS_CODE, c.CUS_NAME, cm.CREDIT_GRADE, cm.LEFT_PRICE, cp.DISCOUNT_RATE, cp.MON_DISC_CNT
  FROM CUSTOMER c
  JOIN CREDIT_MASTER cm ON c.CUS_NO = cm.CUS_NO
  JOIN CREDIT_POLICY cp ON cp.COMPANY_CODE = c.COMPANY_CODE 
                    AND cp.GRADE = cm.CREDIT_GRADE
  WHERE c.COMPANY_CODE = #{companyCode}
  </select>

  <!-- 출하지시서 조회 -->
  <select id="selectDo" resultType="DeliveryOrderVO" parameterType="Long">
SELECT
    d.DO_CODE,
    d.DO_CREATED,
    c.CUS_NAME AS CUS_CODE,
    CASE
        WHEN COUNT(p.PRODUCT_NAME) > 1
            THEN MIN(p.PRODUCT_NAME) || ' 외 ' || (COUNT(p.PRODUCT_NAME) - 1) || '건'
        ELSE MIN(p.PRODUCT_NAME)
    END AS PRODUCT_CODE,
    d.EX_DATE,
    d.DO_STATUS

FROM DELIVERY_ORDER d
JOIN CUSTOMER c
  ON d.CUS_CODE = c.CUS_CODE
JOIN DO_DETAIL dd
  ON d.DO_NO = dd.DO_NO
JOIN PRODUCT p
  ON dd.PRODUCT_CODE = p.PRODUCT_CODE

WHERE d.COMPANY_CODE = #{companyCode}

GROUP BY
    d.DO_CODE, d.DO_CREATED, c.CUS_CODE, c.CUS_NAME,
    d.TOTAL_QTY, d.EX_DATE, d.DO_STATUS
ORDER BY d.DO_CREATED DESC
</select>

<!-- 출하지시서 등록 -->
<insert id="insertDO" parameterType="DoInsertVO">
  INSERT ALL
    INTO DELIVERY_ORDER
      (DO_NO, CUS_CODE, PO_CODE, DO_CODE, EMP_NO, NAME, DO_CREATED,
       TOTAL_QTY, DO_STATUS, NOTES, COMPANY_CODE, EX_DATE, ADDR, ZIP_CODE)
    VALUES
      (DO_NO_SEQ.NEXTVAL, #{cusCode}, #{poCode}, fn_generate_code('DO', ''),
       #{empNo}, #{name}, #{doCreated},
       #{totalQty}, #{doStatus}, #{notes}, #{companyCode}, #{exDate},
       #{addr}, #{zipCode})

    <foreach collection="dodetails" item="dod">
      INTO DO_DETAIL
        (DOD_NO, DO_NO, PRODUCT_CODE, QTY, UNIT_PRICE, SUP_AMT, VAT_AMT, DC_PRICE, COMPANY_CODE)
      VALUES
        (FN_DOD_CODE(), DO_NO_SEQ.CURRVAL, #{dod.productCode}, #{dod.qty},
         #{dod.unitPrice}, #{dod.supAmt}, #{dod.vatAmt}, #{dod.dcPrice}, #{companyCode})
    </foreach>
  SELECT 1 FROM DUAL
</insert>

<!-- 거래처 조회-->
<select id="selectCustomers" resultType="java.util.List" parameterType="String">
  SELECT CUS_CODE, CUS_NAME, CEO_NAME, TEL, ADDR, ACTIVE_STATUS, GBN
  FROM CUSTOMER
  WHERE COMPANY_CODE = #{companyCode}
</select>


<!-- 거래처 관리 조회 페이지 -->
<select id="getCustomerManagement" resultType="CustomerVO" parameterType="Long">
  SELECT CUS_CODE, CUS_NAME, CEO_NAME, TEL, ADDR, ACTIVE_STATUS, GBN
  FROM CUSTOMER
  WHERE COMPANY_CODE = #{companyCode}
</select>

<!-- 거래처 등록 -->
<insert id="insertCustomer" parameterType="CustomerVO">
  INSERT INTO CUSTOMER (CUS_NO, CUS_CODE, EMP_NO, CEMP_NAME, EMP_NAME, CUS_NAME, BIZ_NO, CEO_NAME, BIZ_TYPE, BIZ_CATEGORY, TEL, EMAIL, ADDR, ZIP_CODE, ACTIVE_STATUS, GBN, BANK_NAME, BANK_ACCOUNT, COMPANY_CODE)
  VALUES (CUS_NO_SEQ.NEXTVAL, FN_CUS_CODE(''), #{empNo}, #{cempName}, #{empName}, #{cusName}, #{bizNo}, #{ceoName}, #{bizType}, #{bizCategory}, #{tel}, #{email}, #{addr}, #{zipCode}, #{activeStatus}, #{gbn}, #{bankName}, #{bankAccount}, #{companyCode})
</insert>

<!-- 거래처 단건 수정 -->
  <update id="updateCustomerByCode" parameterType="CustomerVO">
    UPDATE CUSTOMER
    <set>
      <if test="cusName != null">        CUS_NAME = #{cusName},</if>
      <if test="ceoName != null">        CEO_NAME = #{ceoName},</if>
      <if test="tel != null">            TEL = #{tel},</if>
      <if test="addr != null">           ADDR = #{addr},</if>
      <if test="zipCode != null">        ZIP_CODE = #{zipCode},</if>

      <if test="bizNo != null">          BIZ_NO = #{bizNo},</if>
      <if test="bizType != null">        BIZ_TYPE = #{bizType},</if>
      <if test="bizCategory != null">    BIZ_CATEGORY = #{bizCategory},</if>

      <if test="email != null">          EMAIL = #{email},</if>
      <if test="cempName != null">       CEMP_NAME = #{cempName},</if>

      <if test="activeStatus != null">   ACTIVE_STATUS = #{activeStatus},</if>
    </set>
    WHERE CUS_CODE = #{cusCode}
  </update>

<!-- 여신관리 조회 -->
  <!-- 기준월 파라미터가 null이면 SYSDATE 사용 -->
  <select id="selectCrdMaster" resultType="CustomerCreditVO">
    /* 여신현황 + 할인잔여횟수 */
    WITH inv AS (  /* 송장별 금액 (중복 방지) */
      SELECT
          ih.cus_code,
          ih.invoice_no,
          NVL( ih.total_amt,
               SUM(NVL(il.sup_amt,0) + NVL(il.vat_amt,0)) ) AS invoice_amt
      FROM invoice_header ih
      LEFT JOIN invoice_line il
        ON il.invoice_code = ih.invoice_code
      GROUP BY ih.cus_code, ih.invoice_no, ih.total_amt
    ),
    applied AS (  /* 송장별 수금 적용합 */
      SELECT
          p.company_code,
          p.cus_code,
          pa.invoice_no,
          SUM(pa.apply_amount) AS applied_amt
      FROM payment p
      JOIN payment_apply pa
        ON pa.pay_code = p.pay_code
      GROUP BY p.company_code, p.cus_code, pa.invoice_no
    ),
    ar_by_inv AS (  /* 회사 귀속 후 송장단위 미수 */
      SELECT
          cm.company_code,
          i.cus_code,
          i.invoice_no,
          NVL(i.invoice_amt,0) AS invoice_amt,
          NVL(a.applied_amt,0) AS applied_amt,
          GREATEST(NVL(i.invoice_amt,0) - NVL(a.applied_amt,0), 0) AS ar_amt
      FROM inv i
      JOIN credit_master cm
        ON TO_CHAR(cm.cus_code) = i.cus_code
       AND NVL(cm.active_status,'Y') = 'Y'
      LEFT JOIN applied a
        ON a.company_code = cm.company_code
       AND a.cus_code     = i.cus_code
       AND a.invoice_no   = i.invoice_no
    ),
    ar_cust AS (  /* 고객별 미수 합계 */
      SELECT company_code, cus_code, SUM(ar_amt) AS total_ar
      FROM ar_by_inv
      GROUP BY company_code, cus_code
    ),
    disc_limit AS (  /* 등급별 월 허용건수 */
      SELECT
        cm.company_code,
        TO_CHAR(cm.cus_code) AS cus_code,
        CASE WHEN cm.credit_grade = 'A' THEN 3
             WHEN cm.credit_grade = 'B' THEN 1
             ELSE 0 END AS limit_cnt
      FROM credit_master cm
    ),
    disc_used AS (  /* 이번 달 여신할인 사용건수 (PURCHASE_ORDER + PO_DETAIL) */
      SELECT
        po.company_code,
        po.cus_code,
        COUNT(DISTINCT po.po_id) AS used_cnt,
        SUM(NVL(pd.dc_price,0))  AS used_amt
      FROM purchase_order po
      JOIN po_detail      pd ON pd.po_id = po.po_id
      WHERE TRUNC(po.po_date,'MM') = TRUNC(
               /* monthBase가 null이면 SYSDATE */
               NVL(#{monthBase, jdbcType=DATE}, SYSDATE), 'MM')
        AND NVL(pd.credit_active,'N') = 'Y'
        AND NVL(pd.dc_price,0) > 0
      GROUP BY po.company_code, po.cus_code
    )
    SELECT
      cm.company_code                                   AS COMPANY_CODE,
      TO_CHAR(cm.cus_code)                              AS CUS_CODE,
      /* 거래처명은 고객마스터가 있으면 거기에서 조인하세요. 임시로 invoice에서 하나 가져오려면 서브쿼리 사용 */
      (SELECT MAX(ih.cus_name) FROM invoice_header ih WHERE ih.cus_code = TO_CHAR(cm.cus_code)) AS CUS_NAME,
      cm.credit_grade                                    AS CREDIT_GRADE,
      cm.credit_limit                                    AS CREDIT_LIMIT,
      cm.start_date                                      AS START_DATE,
      cm.expire_date                                     AS EXPIRE_DATE,
      NVL(ac.total_ar, 0)                                AS USED_LIMIT,
      (cm.credit_limit - NVL(ac.total_ar, 0))            AS REMAIN_LIMIT,
      NVL(dl.limit_cnt,0)                                AS DISC_LIMIT_CNT,
      NVL(du.used_cnt,0)                                 AS DISC_USED_CNT,
      GREATEST(NVL(dl.limit_cnt,0) - NVL(du.used_cnt,0), 0) AS DISC_LEFT_CNT
    FROM credit_master cm
    LEFT JOIN ar_cust   ac ON ac.company_code = cm.company_code
                          AND ac.cus_code     = TO_CHAR(cm.cus_code)
    LEFT JOIN disc_limit dl ON dl.company_code = cm.company_code
                            AND dl.cus_code     = TO_CHAR(cm.cus_code)
    LEFT JOIN disc_used  du ON du.company_code = cm.company_code
                            AND du.cus_code     = TO_CHAR(cm.cus_code)
    WHERE cm.company_code = #{companyCode}
    ORDER BY cm.cus_code
  </select>


<!-- 여신페이지 Mapper -->
  <!-- ================== ResultMaps ================== -->
  <!-- 그리드(현황) -->
  <!-- type 은 VO FQCN: com.example.credit.vo.CreditExposureVo -->
   <resultMap id="ExposureMap" type="CreditExposureVO">
    <result column="company_code"   property="companyCode"/>
    <result column="cus_code"       property="cusCode"/>
    <result column="cus_name"       property="cusName"/>
    <result column="credit_grade"   property="creditGrade"/>
    <result column="credit_limit"   property="creditLimit"/>
    <result column="start_date"     property="startDate"/>
    <result column="expire_date"    property="expireDate"/>
    <result column="remain_limit"   property="remainLimit"/>
    <result column="manager_name"   property="managerName"/>
    <result column="status"         property="status"/>
  </resultMap> 

  <!-- 단건 상세 -->
  <!-- type: com.example.credit.vo.CreditMasterVo -->
  <resultMap id="MasterMap" type="CreditMasterVO">
    <result column="company_code"   property="companyCode"/>
    <result column="cus_code"       property="cusCode"/>
    <result column="credit_grade"   property="creditGrade"/>
    <result column="credit_limit"   property="creditLimit"/>
    <result column="due_date"       property="dueDate"/>
    <result column="start_date"     property="startDate"/>
    <result column="expire_date"    property="expireDate"/>
    <result column="left_price"     property="leftPrice"/>
    <result column="active_status"  property="activeStatus"/>
    <result column="emp_name"       property="empName"/>
  </resultMap>

  <!-- ================== SELECTS ================== -->

  <!-- 1) 거래처별 여신 현황 (뷰 권장: V_CREDIT_EXPOSURE) -->
  <select id="selectExposureList" resultMap="ExposureMap">
    SELECT company_code, cus_code, cus_name, credit_grade, credit_limit,
           start_date, expire_date, remain_limit, manager_name, status
    FROM   V_CREDIT_EXPOSURE
    WHERE  company_code = #{companyCode}
    <if test="grade != null and grade != ''">
      AND credit_grade = #{grade}
    </if>
    <if test="name != null and name != ''">
      AND (UPPER(cus_name) LIKE '%'||UPPER(#{name})||'%'
           OR TO_CHAR(cus_code) LIKE '%'||#{name}||'%')
    </if>
    <if test="manager != null and manager != ''">
      AND (UPPER(manager_name) LIKE '%'||UPPER(#{manager})||'%')
    </if>
    ORDER BY cus_name
  </select>

  <!-- 2) 단건 조회(수정 모달/페이지) -->
  <select id="selectCreditMaster" resultMap="MasterMap">
    SELECT company_code, cus_code, credit_grade, credit_limit, due_date,
           start_date, expire_date, left_price, NVL(active_status,'Y') AS active_status,
           emp_name
    FROM   credit_master
    WHERE  company_code = #{companyCode}
      AND  cus_code     = #{cusCode}
  </select>

  <!-- ================== UPSERT / UPDATE ================== -->

  <!-- 3) 등록/수정 (MERGE) -->
  <!-- parameterType 은 VO FQCN: com.example.credit.vo.CreditMasterVo -->
 <!--   <update id="upsertCreditMaster" parameterType="CreditMasterVO">
    MERGE INTO credit_master t
    USING (SELECT #{companyCode} AS company_code, #{cusCode} AS cus_code FROM dual) s
      ON (t.company_code = s.company_code AND t.cus_code = s.cus_code)
    WHEN MATCHED THEN UPDATE SET
         credit_grade  = #{creditGrade},
         credit_limit  = #{creditLimit},
         due_date      = #{dueDate},
         start_date    = #{startDate},
         expire_date   = #{expireDate},
         emp_name      = #{empName},
         active_status = NVL(#{activeStatus}, 'Y')
    WHEN NOT MATCHED THEN
      INSERT (credit_no, company_code, cus_code, credit_grade, credit_limit,
              due_date, start_date, expire_date, left_price, created_date, active_status, emp_name)
      VALUES (SEQ_CREDIT_NO.NEXTVAL, #{companyCode}, #{cusCode}, #{creditGrade}, #{creditLimit},
              #{dueDate}, #{startDate}, #{expireDate}, 0, SYSDATE, NVL(#{activeStatus}, 'Y'), #{empName})
  </update>  -->

  <!-- 4) 비활성화(실삭제 X) -->
  <update id="deactivateCredit">
    UPDATE credit_master
       SET active_status = 'N',
           expire_date   = NVL(expire_date, SYSDATE)
     WHERE company_code = #{companyCode}
       AND cus_code     = #{cusCode}
  </update>

</mapper>
